#!/usr/bin/env python3

import argparse
import plptree
import os
from prettytable import PrettyTable
from collections import OrderedDict
from padframe.padframe import Padframe

parser = argparse.ArgumentParser(description='Manage PAD configuration')

parser.add_argument(
    "--profiles", dest="profiles", action="store_true",
    help="Show profiles"
)

parser.add_argument(
    "--pads", dest="pads", action="store_true",
    help="Show pads"
)

parser.add_argument(
    "--rt-pads-file", dest="rt_pads_file", default=None,
    help="Dump runtime PADS configuration"
)

[args, otherArgs] = parser.parse_known_args()

parser.args = parser.parse_args()


toolsDir = os.path.join(os.path.dirname(os.path.realpath(__file__)), os.pardir)

configs = plptree.get_configs_from_env(path=toolsDir)



if args.profiles:
    for config in configs:
        padframe_conf = config.get_config('padframe')
        if padframe_conf is not None:
            padframe = Padframe(padframe_conf)
            for profile in padframe.get_profiles():
                x = PrettyTable(['Group', 'Pads'])
                x.align['Group'] = "l"
                x.align['Pads'] = "l"
                for group_name, group in profile.get_groups().items():
                    row = [ group_name ]
                    pad_list = []
                    for pad in group:
                        pad_list.append('%s(%d)' % (pad.alternate.name, pad.pad.id))
                    row.append(', '.join(pad_list))
                    x.add_row(row)
                print ()
                print ('Pads configuration for profile: ' + profile.name)
                print (x)

if args.pads:
    for config in configs:
        padframe_conf = config.get_config('padframe')

        if padframe_conf is not None:
            padframe = Padframe(padframe_conf)
            title_row = ['ID', 'Name']

            for alternate in range(0, padframe.nb_alternate):
                title_row.append('Alternate %d' % (alternate))

            x = PrettyTable(title_row)
            x.align = "l"

            pad_id = 0
            for pad in padframe.get_pads():
                row = [pad_id, pad.name]
                for alternate in range(0, padframe.nb_alternate):
                    row.append(pad.get_alternate(alternate).name)

                x.add_row(row)
                pad_id += 1

            print (x)

if args.rt_pads_file is not None:
    padframe_conf = configs[0].get_config('padframe')
    padframe = Padframe(padframe_conf)
    padframe.gen_rt_conf(args.rt_pads_file)